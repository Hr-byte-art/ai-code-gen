package com.wjh.aicodegen.langgraph4j.node;

import com.wjh.aicodegen.langgraph4j.ai.ImageCollectionService;
import com.wjh.aicodegen.langgraph4j.state.WorkflowContext;
import com.wjh.aicodegen.manager.SpringContextUtil;
import lombok.extern.slf4j.Slf4j;
import org.bsc.langgraph4j.action.AsyncNodeAction;
import org.bsc.langgraph4j.prebuilt.MessagesState;

import static org.bsc.langgraph4j.action.AsyncNodeAction.node_async;

/**
 * 图片收集节点
 * 使用AI进行工具调用，收集不同类型的图片
 * <p>
 * 当前存在的问题：
 * 目前通过工具调用获取图片需要和 AI 进行多轮交互，不仅耗费时间长、性能低、还会消耗大量 token。
 * 优化方案
 * 其实可以转变思路，先通过调用 AI 获取要收集的图片类别和参数（输出图片收集任务），利用结构化输出返回这些信息，然后并发调用对应的图片收集工具执行。
 * 接下来，具体的并发实现方案有 3 种：
 * 1）工作节点内部实现并发（推荐）
 * 在图片收集节点内部通过 CompletableFuture 并发调用工具进行收集，并更新结果。
 * 2）利用 LangGraph4j 的并发能力
 * 把每个图片收集工具定义成工作节点，并发执行这些工具，最后再统一汇总结果。
 * 3）利用 LangGraph4j 的子图能力
 * 把每个图片收集工具定义成子图，并发执行这些工具，最后再统一汇总结果。
 * </p>
 * @author 木子宸
 */
@Slf4j
public class ImageCollectorNode {

    public static AsyncNodeAction<MessagesState<String>> create() {
        return node_async(state -> {
            WorkflowContext context = WorkflowContext.getContext(state);
            String originalPrompt = context.getOriginalPrompt();
            String imageListStr = "";
            try {
                // 获取AI图片收集服务
                ImageCollectionService imageCollectionService = SpringContextUtil.getBean(ImageCollectionService.class);
                // 使用 AI 服务进行智能图片收集
                imageListStr = imageCollectionService.collectImages(originalPrompt);
            } catch (Exception e) {
                log.error("图片收集失败: {}", e.getMessage(), e);
            }
            // 更新状态
            context.setCurrentStep("图片收集");
            context.setImageListStr(imageListStr);
            return WorkflowContext.saveContext(context);
        });
    }
}

